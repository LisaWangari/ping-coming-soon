{"version":3,"sources":["images/illustration-dashboard.png","components/Header/Header.js","components/Email/Email.js","components/Dashboard/Dashboard.js","components/Socials/Socials.js","components/SocialIcon/SocialIcon.js","components/Ping/Ping.js","serviceWorker.js","index.js","images/logo.svg"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","emailSchema","Yup","shape","email","required","Email","formik_esm","initialValues","validationSchema","onSubmit","values","console","log","_ref","errors","touched","name","Dashboard","dashboard","Socials","children","SocialIcon","socialLink","iconName","href","concat","Ping","components_Header_Header","components_Email_Email","components_Dashboard_Dashboard","components_Socials_Socials","components_SocialIcon_SocialIcon","Boolean","window","location","hostname","match","ReactDOM","render","components_Ping_Ping","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qUCkBzBC,UAZA,WACb,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,IAAKC,IAAMC,IAAI,cAC3CN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,oBACmBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,UAEnBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,iDCPAI,UAAcC,WAAaC,MAAM,CACrCC,MAAOF,WACJE,MAAM,iBACNC,SAAS,oCAiCCC,EA9BD,WACZ,OACEZ,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,cAAe,CAAEJ,MAAO,IACxBK,iBAAkBR,EAClBS,SAAU,SAAAC,GACRC,QAAQC,IAAI,UAAWF,KAGxB,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,QAAX,OACCtB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMV,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOV,UAAU,cAAcoB,KAAK,WACnCF,EAAOX,OAASY,EAAQZ,MACvBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAekB,EAAOX,SAKzCV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAlB,qCCnBCqB,UARG,WAChB,OACExB,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACjBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKqB,IAAWnB,IAAI,iBAAiBH,UAAU,oBCM3CuB,UARC,SAAAN,GAAkB,IAAfO,EAAeP,EAAfO,SACjB,OAAO3B,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBAAiBwB,KCY9BC,EAfI,SAAAR,GAA8B,IAA3BS,EAA2BT,EAA3BS,WAAYC,EAAeV,EAAfU,SAChC,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,KAAG6B,KAAMF,GACP7B,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAA6B,OAAKF,EAAL,qBCyBLG,UAxBF,WACX,OACEjC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAD,CACET,WAAW,uBACXC,SAAS,sBAEX9B,EAAAC,EAAAC,cAACoC,EAAD,CACET,WAAW,sBACXC,SAAS,mBAEX9B,EAAAC,EAAAC,cAACoC,EAAD,CACET,WAAW,wBACXC,SAAS,yBCfCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInB3D,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.39907922.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/illustration-dashboard.92dd5c8f.png\";","import React from \"react\";\r\n\r\nimport logo from \"../../images/logo.svg\";\r\n\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <section className=\"headerContainer\">\r\n      <img className=\"headerLogo\" src={logo} alt=\"ping logo\" />\r\n      <h1 className=\"launchHeader\">\r\n        We are launching <span className=\"launchSpan\">soon!</span>\r\n      </h1>\r\n      <h3 className=\"subHeader\">Subscribe and get notified</h3>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport \"./Email.css\";\r\n\r\nconst emailSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Invalid Email\")\r\n    .required(\"An email address is required.\")\r\n});\r\n\r\nconst Email = () => {\r\n  return (\r\n    <section className=\"emailSection\">\r\n      <div className=\"inputSection\">\r\n        <Formik\r\n          initialValues={{ email: \"\" }}\r\n          validationSchema={emailSchema}\r\n          onSubmit={values => {\r\n            console.log(\"values \", values);\r\n          }}\r\n        >\r\n          {({ errors, touched }) => (\r\n            <Form className=\"notifyForm\">\r\n              <div className=\"inputGroup\">\r\n                <Field className=\"notifyInput\" name=\"email\" />\r\n                {errors.email && touched.email ? (\r\n                  <div className=\"notifyError\">{errors.email}</div>\r\n                ) : (\r\n                  <div className=\"notifyError\">{errors.email}</div>\r\n                )}\r\n              </div>\r\n              <button className=\"notifyButton\">Notify Me</button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n","import React from \"react\";\r\n\r\nimport dashboard from \"../../images/illustration-dashboard.png\";\r\n\r\nimport \"./Dashboard.css\";\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <section className=\"dashboardSection\">\r\n      <img src={dashboard} alt=\"Dashboard Logo\" className=\"dashboardImg\" />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Socials.css\";\r\n\r\n// The socials component is the section of the page that contains any number of social media icons. Use the SocialIcon component to create the social media icons.\r\n\r\nconst Socials = ({ children }) => {\r\n  return <section className=\"socialSection\">{children}</section>;\r\n};\r\n\r\nSocials.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Socials;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// This component is to be used with the Socials component to display individual social icons, you can set the font awesome icons name with prop iconName, socialLink to lead the user to a site when clicking on the icon and the so\r\n\r\nconst SocialIcon = ({ socialLink, iconName }) => {\r\n  return (\r\n    <div className=\"socialIcon\">\r\n      <a href={socialLink}>\r\n        <i className={`${iconName} socialColor`} />\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nSocialIcon.propTypes = {\r\n  socialLink: PropTypes.string,\r\n  iconName: PropTypes.string\r\n};\r\n\r\nexport default SocialIcon;\r\n","import React from \"react\";\r\n\r\nimport Header from \"../Header/Header\";\r\nimport Email from \"../Email/Email\";\r\nimport Dashboard from \"../Dashboard/Dashboard\";\r\nimport Socials from \"../Socials/Socials\";\r\nimport SocialIcon from \"../SocialIcon/SocialIcon\";\r\n\r\nimport \"./Ping.css\";\r\n\r\nconst Ping = () => {\r\n  return (\r\n    <main>\r\n      <Header />\r\n      <Email />\r\n      <Dashboard />\r\n      <Socials>\r\n        <SocialIcon\r\n          socialLink=\"https://facebook.com\"\r\n          iconName=\"fab fa-facebook-f\"\r\n        />\r\n        <SocialIcon\r\n          socialLink=\"https://twitter.com\"\r\n          iconName=\"fab fa-twitter\"\r\n        />\r\n        <SocialIcon\r\n          socialLink=\"https://instagram.com\"\r\n          iconName=\"fab fa-instagram\"\r\n        />\r\n      </Socials>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Ping;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Ping from \"./components/Ping/Ping\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Ping />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ddf22f0b.svg\";"],"sourceRoot":""}